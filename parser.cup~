
import java_cup.runtime.*;    
import ast.*;

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
  
  
  
terminal           SEMI, AND, IFF, OR, TRUTH, FALSITY, EQUALS, IMPLIES, NOT, FORALL, THEREEXISTS, LBRACKET, RBRACKET, COMMA;   
terminal String   ID;   
non terminal LogicStatement     statementList, oneOfStatement, LogicStatements, UnaryOpStatements, BinaryOpStatements, NotStatements, Variables, AndStatements, OrStatements, ImpliesStatements, IFFStatements;   


precedence left COMMA;
precedence left ID;
precedence left FALSITY;
precedence left TRUTH;
precedence left IFF;
precedence left IMPLIES;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQUALS;
precedence left THEREEXISTS;
precedence left FORALL;
precedence left LBRACKET;
precedence left RBRACKET;
precedence left SEMI;

statementList ::= statementList oneOfStatement 
                  | 
                  oneOfStatement; 
                  
oneOfStatement ::= LogicStatements SEMI;

LogicStatements ::= Variables:v
                 {: RESULT = v; :}
                 | TRUTH 
                 {: RESULT = new Truth(); :}
                 | FALSITY 
                 {: RESULT = new Falsity(); :}
                 | UnaryOpStatements:u 
                 {: RESULT = u; :}
                 | BinaryOpStatements:b 
                 {: RESULT = b; :} 
                 | LBRACKET LogicStatements:l RBRACKET 
                 {: RESULT = l; :} 
                 ;
                 
Variables ::= ID:i 
           {: RESULT = new Variable(i); :}
           ;   
           
UnaryOpStatements ::= NotStatements:n 
                   {: RESULT = n; :}
                   ;
                   
NotStatements ::= NOT LogicStatements:l 
               {: RESULT = new NotStatement(l); :}
               ;
               
BinaryOpStatements ::= AndStatements:a 
                    {: RESULT = a; :}
                    | OrStatements:o 
                    {: RESULT = o; :}
                    | ImpliesStatements:i 
                    {: RESULT = i; :}
                    | IFFStatements:f 
                    {: RESULT = f; :}
                    ; 
                    
AndStatements ::= LogicStatements:l AND LogicStatements:p 
               {: RESULT = new AndStatement(l,p); :}
               ;
               
OrStatements ::= LogicStatements:l OR LogicStatements:p 
              {: RESULT = new OrStatement(l,p); :}
              ; 
              
ImpliesStatements ::= LogicStatements:l IMPLIES LogicStatements:p 
                   {: RESULT = new ImpliesStatement(l,p); :}
                   ; 
                   
IFFStatements ::= LogicStatements:l IFF LogicStatements:p 
               {: RESULT = new IFFStatement(l,p); :}
               ; 

